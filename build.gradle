plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'org.liquibase.gradle' version '2.0.2'
}

repositories {
    mavenCentral()
}


group = 'com.meta-bug'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

liquibase {
    activities {
        local {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
            url 'jdbc:postgresql://localhost:5432/meta-bug'
            username 'postgres'
            password 'postgres'
            driver 'org.postgresql.Driver'
        }
    }
    runList 'local'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Liquibase
    implementation 'org.liquibase:liquibase-core:3.8.6'
    liquibaseRuntime 'org.liquibase:liquibase-core:3.8.6'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.1'
    liquibaseRuntime 'ch.qos.logback:logback-core:1.2.3'
    liquibaseRuntime 'ch.qos.logback:logback-classic:1.2.3'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'org.yaml:snakeyaml:1.25'

    // H2
    runtimeOnly 'com.h2database:h2:1.4.200'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

task buildDocker(type: Exec) {
    workingDir "$projectDir/docker-dir/postgres-meta-bug"

    if (!System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'bash', '-c',
                'if [ "$(docker images -q "postgres-meta-bug" 2>/dev/null)" = "" ]; then\
                    docker build -t postgres-meta-bug .;\
                 fi'
    }
}

task runDocker(type: Exec) {

    if (!System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'bash', '-c',
                'if [ "$(docker ps -aq -f name=postgres-meta-bug)" = "" ]; then\
                    docker run --name postgres-meta-bug -p 5432:5432 -d postgres-meta-bug;\
                elif [ "$(docker inspect -f \'{{.State.Running}}\' postgres-meta-bug)" = "false" ]; then\
                    docker start postgres-meta-bug;\
                fi'
    }
}

task cleanDocker(type: Exec) {

    if (!System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'bash', '-c',
                'if [ "$(docker ps -a -q)" != "" ]; then\
                    docker stop postgres-meta-bug;\
                    docker rm postgres-meta-bug;\
                 fi'
    }
}